#!/usr/bin/perl -w

use strict;

my $MASTERCOPYRIGHT = "(C) 1999-2011 Daniel Wagenaar";
my $DEFAULTCONFIG = ".matlabdoc";
my $force = 0;
my $srcbase = "./$DEFAULTCONFIG";
$srcbase = shift @ARGV if @ARGV;
if ($srcbase eq "-f") {
  $force=1;
  $srcbase = "./$DEFAULTCONFIG";
  $srcbase = shift @ARGV if @ARGV;
}

my $dstbase;
my $srclink;
my $title="";
my @folders;

if (@ARGV) {
  $dstbase = shift @ARGV or usage();
  $title = shift @ARGV or usage();
  @folders = @ARGV;
} else {
  $srcbase = "$srcbase/$DEFAULTCONFIG" if -d $srcbase;
  if (-f "$srcbase") {
    open CONF, "$srcbase";
    $srcbase =~ s/\/[^\/]*$//; # drop extension
    while (<CONF>) {
      chomp;
      s/\#.*//;
      s/^\s+//;
      s/\s+$//;
      next if /^$/;
      my ($k,$v) = split(/\s*=\s*/,$_,2);
      $k = lc $k;
      if ($k =~ /source/) {
        $srcbase = $v;
      } elsif ($k =~ /dest/) {
        $dstbase = $v;
      } elsif ($k =~ /link/) {
        $srclink = $v;
      } elsif ($k =~ /title/) {
        $title = $v;
      } elsif ($k =~ /folder/) {
        my @v = split(/\s+/,$v);
        push @folders,$_ for (@v);
      } elsif ($k =~ /copyright/) {
        $MASTERCOPYRIGHT = $v;
      } else {
	print "Unknown key: $k\n";
        usage();
      }
    }
    close CONF;
    $force=1;
  } else {
    usage();
  }
}

if (defined $srclink) {
  $srclink="../$srclink" if $srclink =~ /^\./;
}

sub usage {
  print STDERR <<"EOF";
Usage: matlabdoc -f SRCBASE DSTBASE TITLE FOLDERS
       matlabdoc CONFIGFILE
       matlabdoc

Scans all files in SRC for header comments and generates
an indexed directory of html files.
Option -f forces overwrite of DSTBASE.
The final form loads a config file ".matlabdoc" in the current directory.

Options in the configuration file include:

  SOURCE: source path
  DEST: destination path
  TITLE: page title
  FOLDER: sub directories
  COPYRIGHT: default copyright message

Keys and values must be separated by "=".

The short forms imply -f.
EOF
  exit 1;
}

usage() unless defined $dstbase;
push @folders, "." unless @folders;

unless ($force) {
  if (-f $dstbase || -d $dstbase) {
    print STDERR "$dstbase already exists. Use '-f' to force.\n";
    exit 2;
  }
}

my %folders;
$folders{$_} = 1 for (@folders);
my %headlines;
for my $fld (@folders) {
  if (open CONT, "$srcbase/$fld/Contents.m") {
    my $head = <CONT>;
    close CONT;
    chomp $head;
    $head =~ s/^\s*\%\s*//;
    $headlines{$fld} = $head;
  }
}

system("rm -rf $dstbase");
system("mkdir -p $dstbase");

open IDX, ">$dstbase/index.html";
print IDX <<"EOF";
<html>
  <head>
    <title>$title</title>
  </head>
  <body>
    <h1>$title</h1>
    <ul>
EOF

for my $fld (sort @folders) {
  $fld =~ s/\/$//;
  print IDX "      <li>\n";
  print IDX "         <a href=\"$fld/index.html\">$fld</a>";
  print IDX ": $headlines{$fld}" if exists $headlines{$fld};
  print IDX "\n";
  print IDX "      </li>\n";
}
my $date = `date`; chomp $date;
print IDX "    </ul>\n";
print IDX footer();
close IDX;

for my $fld (sort @folders) {
  $fld =~ s/\/$//;
  my $copy;
  my @contents;
  my @subdirs;
  if (open CONT, "$srcbase/$fld/Contents.m") {
    my $drophead = <CONT>; # drop first line
    $copy = <CONT>;
    $copy = $MASTERCOPYRIGHT unless defined $copy;
    $copy =~ s/^\s*\%\s*//;
    my $first=1;
    while (<CONT>) {
      s/^ *\% ?//;
      next if $first && /^$/;
      push @contents,$_;
      $first=0;
    }
    close CONT;
  }

  system("mkdir -p $dstbase/$fld");
  my $fldttl = ($fld eq ".") ? "" : ": $fld";
  open IDX, ">$dstbase/$fld/index.html";
  print IDX <<"EOF";
<html>
  <head>
    <title>$title$fldttl</title>
  </head>
  <body>
    <h1>
EOF
  if ($fld eq ".") {
    print IDX "$title\n";
  } else {
    print IDX "<a href=\"../index.html\">$title</a>$fldttl\n";
  }
  print IDX "</h1>\n";
  if (exists($headlines{$fld})) {
    print IDX "<h2>$headlines{$fld}";
    print IDX " [<a href=\"#index\">function index</a>]" if @contents;
    print IDX "</h2>\n";
  }

  opendir FOLDER,"$srcbase/$fld";
  my @files = readdir(FOLDER);
  closedir FOLDER;
  my %files;
  for (@files) {
    my $fn = $_;
    push @subdirs, $fn if (-d "$srcbase/$fld/$fn") && exists($folders{"$fld/$fn"});
    $fn =~ s/\.m$// or next;
    next if lc($fn) eq "contents";
    $files{lc($fn)} = $fn;
  }

  if (@subdirs) {
    print IDX "<ul>\n";
    for (sort @subdirs) {
      my $extra = "";
      $extra = $headlines{"$fld/$_"} if exists($headlines{"$fld/$_"});
      $extra = ": $extra" if $extra;
      print IDX "<li><a href=\"$_/index.html\">$_</a>$extra</li>\n";
    }
    print IDX "</ul><p></p>\n";
  }
  
  if (@contents) {
    my $spc0=-1;
    my $spc1=-1;
    my $first=1;
    my $lastlen=0;
    for (@contents) {
      if (/^\s*$/) {
	print IDX "\n\n<p>\n" unless $first;
	$first=1;
	next;
      }
      my @splt = split(/(\W+)/,$_);
      my $spc = $_; $spc =~ s/^( *).*/$1/; $spc=length($spc);
      $spc0 = $spc if $spc0<0;
      print IDX "<br>\n" if ($spc>$spc0 || $spc!=$spc1 || /=/ || $lastlen<50 || /^\s*[A-Z]/)  && !$first;
      $lastlen = length($_);
      $first=0;
      print IDX "&nbsp;&nbsp;" x ($spc-$spc0) if $spc>$spc0;

      for (@splt) {
	if (exists($files{lc($_)})) {
	  print IDX "<a href=\"" . $files{lc($_)} . ".html\"><b>$_</b></a>";
	} else {
	  print IDX htmlify($_);
	}
      }
      $spc1=$spc;
      print IDX "\n";
    }
    print IDX "<p>$copy\n\n<hr>\n";
  }

  print IDX "<a name=\"index\"> </a>\n";
  print IDX "\n  <ul>\n";
  for my $fn (sort @files) {
    $fn =~ /^\./ and next;
    $fn =~ s/\.m$// or next;
    next if lc($fn) eq "contents";
    my $tag = document($fld,$fn) or next;
    my @tag = split(/ +/,$tag);
    my $foo = shift @tag;
    if ($foo eq uc($foo)) {
      $tag = join(" ",@tag);
      $foo = lc $foo;
    } else {
      $foo = lc($fn);
    }
    $tag = "" unless defined $tag;
    $foo = "" unless defined $foo;
    $tag =~ s/^ *- *//;
    $tag =~ s/\.?$/./;
    print IDX "      <li>\n";
    print IDX "         <a href=\"$fn.html\">$fn</a>: $tag\n";
    print IDX "      </li>\n";
  }

  print IDX "    </ul>\n";
  print IDX footer();

  close IDX;
}

exit 0;

sub document {
  my $fld = shift;
  my $fn = shift;
  my @cmtlines;
  open MAT, "$srcbase/$fld/$fn.m";
  my $started=0;
  my $count=0;
  while (<MAT>) {
    chomp;
    /^ *\%/ and $started=1;
    if ($started) {
      last unless /^ *\%/;
      s/^ *\% ?//;
      push @cmtlines, $_;
    } else {
      $count++;
      last if $count>3;
    }
  }
  close MAT;

  return 0 unless @cmtlines;

  my $tagline = shift @cmtlines;
  
  open HTML, ">$dstbase/$fld/$fn.html";
  my $fldttl = ($fld eq ".") ? "": ": $fld";
  print HTML <<"EOF";
<html>
  <head>
    <title>$title$fldttl: $fn</title>
  </head>
  <body>
<h1>
EOF
  if ($fld eq ".") {
    print HTML "<a href=\"index.html\">$title</a>:\n";
  } else {
    print HTML "<a href=\"../index.html\">$title</a>:\n";
    print HTML "<a href=\"index.html\">$fld</a>:\n";
  }
  print HTML "<a href=\"$srclink/$fld/$fn.m\">" if defined $srclink;
  print HTML "$fn";
  print HTML "</a>" if defined $srclink;
  print HTML "</h1>\n";
  
  my $tag = $tagline;
  my @tag = split(/ +/,$tag);
  my $foo = shift @tag;
  if ($foo eq uc($foo)) {
    $tag = join(" ",@tag);
    $foo = lc($foo);
    $tag =~ s/^ *- *//;
    $tag =~ s/\.?$/./;
    
    print HTML "<p><b>$foo</b>: $tag\n\n";
    print HTML "<p>\n";
  } else {
    print HTML "<p>\n";
    unshift @cmtlines, $tagline;
    $foo = lc($fn);
  }

  my %args=();
  my $spc0=-1;
  my $spc1=-1;
  my $first=1;
  for (@cmtlines) {
    my @splt = split(/(\W+)/,$_);
    my $in = 0;
    my $pre = 1;
    my $quot = 0;
    my @earlier;
    for (@splt) {
      $in=1 if lc($_) eq $foo;
      $in=2 if $in==1 && /\(/;
      $in=3 if $in==2 && /\)/;
      $pre=2 if $pre==1 && /\[/;
      $pre=3 if $pre==2 && /\]/;
      $quot = 0 if /\W/;
      $quot = 1 if /'$/;
      $args{lc($_)}=1 if $in==2 && /[a-zA-Z]/ && !$quot;
      push @earlier, $_ if $pre && /[a-zA-Z]/;
      @earlier=(), $pre=1 if $pre!=2 && /,/;
      $pre = 0 if /=/;
    }
    if ($in==3 && !$pre) {
      for (@earlier) {
	$args{lc($_)}=1;
      }
    }
  }
  my $lastlen=0;
  for (@cmtlines) {
    if (/^\s*$/) {
      print HTML "\n\n<p>\n";
      $first=1;
      next;
    }
    my @splt = split(/(\W+)/,$_);
    my $spc = $_; $spc =~ s/^( *).*/$1/; $spc=length($spc);
    $spc0 = $spc if $spc0<0;
    print HTML "<br>\n" if ($spc>$spc0 || $spc!=$spc1 || /=/ || $lastlen<50 || /^\s*[A-Z]/)  && !$first;
    $lastlen = length($_);
    $first=0;
    print HTML "&nbsp;&nbsp;" x ($spc-$spc0) if $spc>$spc0;

    for (@splt) {
      if (lc($_) eq $foo) {
	print HTML "<b>$foo</b>";
      } elsif (exists($args{lc($_)})) {
	print HTML "<i>". lc($_)."</i>";
      } else {
	print HTML htmlify($_);
      }
    }
    $spc1=$spc;
    print HTML "\n";
  }
  print HTML footer();
  close HTML;

  return $tagline;
}

sub footer {
  return <<"EOF";
    <hr>
    <i>Documentation extracted by matlabdoc on $date.</i>
  </body>
</html>
EOF
}

sub htmlify {
  my $str = shift;
  $str =~ s/\&/\&amp;/;
  $str =~ s/</\&lt;/;
  $str =~ s/>/\&gt;/;
  return $str;
}
