#!/usr/bin/python3

# QPlot - Publication quality 2D graphs with dual coordinate systems
# Copyright (C) 2014-2023  Daniel Wagenaar
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import re
import subprocess
import json
import base64

sys.path.append("./code")


def loadipynb(ifn):
    with open(ifn, "r") as fd:
        ipynb = json.load(fd)
    return ipynb


qpre = re.compile(r"qp\.([a-z]+)")
def link_(mtch):
    # Replace qp.xxxx with a link
    cap = mtch.group()
    return f"""<a class="reflink" href="pyref/{cap[3:]}.html">{cap}</a>"""
tickre = re.compile(r"`(.*?)`")
def itick_(mtch):
    # Replace `xxxx` with a custom span
    cap = mtch.group(1)
    return f"""<code class="itick">{cap}</code>"""
starre = re.compile(r"\*(.*?)\*")
def star_(mtch):
    # replace *xxx* with italic
    cap = mtch.group(1)
    return f"""<i>{cap}</i>"""
def linksubst(txt, code=False):
    txt = qpre.sub(link_, txt)
    if not code:
        txt = tickre.sub(itick_, txt)
        txt = starre.sub(star_, txt)
    return txt


incode = False
inlist = False

def writemd(src, fd):
    global incode, inlist
    def endstuff():
        global incode, inlist
        if incode:
            fd.write("</code></pre>")
            incode = False
        if inlist:
            fd.write("""</ul>""")
            inlist = False
            
    for line in src:
        if line.startswith("###"):
            endstuff()
            txt = line[3:].strip()
            fd.write(f"<h3>{txt}</h3>\n")
            continue
        if line.startswith("##"):
            endstuff()
            txt = line[2:].strip()
            fd.write(f"<h2>{txt}</h2>\n")
            continue
        if line.startswith("#"):
            endstuff()
            txt = line[1:].strip()
            #fd.write(f"<h1>{txt}</h1>\n")
            continue
        if line.startswith("      "):
            if not incode:
                fd.write("""<pre class="code python literal-block"><code>""")
                incode = True
            fd.write(linksubst(line[6:], incode))
            continue
        if line.startswith("* "):
            if not inlist:
                fd.write("""<ul>""")
                inlist = True
            fd.write(f"""<li>{linksubst(line[2:])}</li>""")
            continue
        endstuff()
        fd.write("<p>" + linksubst(line))
    fd.write("\n\n")

    
def writepy(src, fd):
    if not src:
        return
    fd.write("""<pre class="code python literal-block"><code>""")
    for line in src:
        fd.write(linksubst(line, True))
    fd.write("""</code></pre>\n\n""")

    
def writeout(src, uid, fd, imgdir, leafbase, imgmap):
    xx = imgdir.split("/")
    reldir = "/".join(xx[2:])
    for s1 in src:
        if "data" in s1:
            if "image/png" in s1["data"]:
                n = len(imgmap) + 1
                imgfn = f"{leafbase}-{n}.png"
                imgmap[uid] = n
                data = base64.b64decode(s1["data"]["image/png"])
                with open(f"{imgdir}/{imgfn}", "wb") as imgfd:
                    imgfd.write(data)
                width = s1["metadata"]["image/png"]["width"]
                height = s1["metadata"]["image/png"]["height"]
                fd.write("\n")
                fd.write(f"""<img src="../{reldir}/{imgfn}" width="{width}px" class="align-center">""")

                                           


def saverst(cells, ofn, imgdir):
    leafbase = ofn.split("/")[-1].split(".")[0]
    imgmap = {}
    with open(ofn, "w") as fd:
        for cel in cells:
            if cel["cell_type"] == "markdown":
                writemd(cel["source"], fd)
            elif cel["cell_type"] == "code":
                writepy(cel["source"], fd)
                writeout(cel["outputs"], cel["id"], fd, imgdir, leafbase, imgmap)


ifn, ofn, imgdir = sys.argv[1:4]

ipynb = loadipynb(ifn)
saverst(ipynb["cells"], ofn, imgdir)

