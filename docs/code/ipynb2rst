#!/usr/bin/python3

# QPlot - Publication quality 2D graphs with dual coordinate systems
# Copyright (C) 2014-2023  Daniel Wagenaar
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import regex
import subprocess
import json
import base64

sys.path.append("./code")




def loadipynb(ifn):
    with open(ifn, "r") as fd:
        ipynb = json.load(fd)
    return ipynb



qpre = regex.compile(r"qp\.([a-z]+)")
def link_(mtch):
    cap = mtch.group()
    return f" `{cap} <../pyref/{cap[3:]}.html>`_ "
def linksubst(txt):
    return qpre.sub(link_, txt)



def writemd(src, fd):
    incode = False
    for line in src:
        if line.startswith("###"):
            txt = line[3:].strip()
            fd.write(txt + "\n")
            fd.write("~" * len(txt) + "\n")
        elif line.startswith("##"):
            txt = line[2:].strip()
            fd.write(txt + "\n")
            fd.write("-" * len(txt) + "\n")
        elif line.startswith("#"):
            txt = line[1:].strip()
            fd.write(txt + "\n")
            fd.write("=" * len(txt) + "\n")
        elif line.startswith("      "):
            if not incode:
                fd.write(".. code-block:: python\n\n")
                incode = True
            fd.write(linksubst(line))
        else:
            if incode:
                fd.write("\n")
            fd.write(linksubst(line.replace("`", "``")))
    fd.write("\n\n")

    
def writepy(src, fd):
    if not src:
        return
    fd.write(".. code-block:: python\n\n")
    for line in src:
        fd.write("    " + linksubst(line))
    fd.write("\n\n")

    
def writeout(src, uid, fd, imgdir):
    for s1 in src:
        if "data" in s1:
            if "image/png" in s1["data"]:
                data = base64.b64decode(s1["data"]["image/png"])
                with open(f"{imgdir}/{uid}.png", "wb") as imgfd:
                    imgfd.write(data)
                width = s1["metadata"]["image/png"]["width"]
                height = s1["metadata"]["image/png"]["height"]
                fd.write("\n")
                fd.write(f".. image:: {uid}.png\n")
                fd.write(f"   :width: {width}\n")
                fd.write(f"   :align: center\n")
                fd.write("\n")
                                           


def saverst(cells, ofn, imgdir):
    with open(ofn, "w") as fd:
        for cel in cells:
            if cel["cell_type"] == "markdown":
                writemd(cel["source"], fd)
            elif cel["cell_type"] == "code":
                writepy(cel["source"], fd)
                writeout(cel["outputs"], cel["id"], fd, imgdir)


if len(sys.argv) >= 2:
    ifn = sys.argv[1]
else:
    ifn = "source/tutorial/tutorial1.ipynb"
ipynb = loadipynb(ifn)


if len(sys.argv) >= 3:
    ofn = sys.argv[2]
else:
    ofn = "build/tutorial1.rst"

if len(sys.argv) >= 4:
    imgdir = sys.argv[3]
else:
    imgdir = "build/html/tutorial"
saverst(ipynb["cells"], ofn, imgdir)

